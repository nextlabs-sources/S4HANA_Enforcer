#line 2 "sqlparser_hana_flex.cpp"

#line 4 "sqlparser_hana_flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hana__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hana__create_buffer
#endif

#ifdef yy_delete_buffer
#define hana__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hana__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hana__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hana__scan_buffer
#endif

#ifdef yy_scan_string
#define hana__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hana__scan_string
#endif

#ifdef yy_scan_bytes
#define hana__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hana__scan_bytes
#endif

#ifdef yy_init_buffer
#define hana__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hana__init_buffer
#endif

#ifdef yy_flush_buffer
#define hana__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hana__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hana__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hana__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hana__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hana__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hana_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hana_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hana_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hana_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hana_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hana_ensure_buffer_stack
#endif

#ifdef yylex
#define hana_lex_ALREADY_DEFINED
#else
#define yylex hana_lex
#endif

#ifdef yyrestart
#define hana_restart_ALREADY_DEFINED
#else
#define yyrestart hana_restart
#endif

#ifdef yylex_init
#define hana_lex_init_ALREADY_DEFINED
#else
#define yylex_init hana_lex_init
#endif

#ifdef yylex_init_extra
#define hana_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hana_lex_init_extra
#endif

#ifdef yylex_destroy
#define hana_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hana_lex_destroy
#endif

#ifdef yyget_debug
#define hana_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hana_get_debug
#endif

#ifdef yyset_debug
#define hana_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hana_set_debug
#endif

#ifdef yyget_extra
#define hana_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hana_get_extra
#endif

#ifdef yyset_extra
#define hana_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hana_set_extra
#endif

#ifdef yyget_in
#define hana_get_in_ALREADY_DEFINED
#else
#define yyget_in hana_get_in
#endif

#ifdef yyset_in
#define hana_set_in_ALREADY_DEFINED
#else
#define yyset_in hana_set_in
#endif

#ifdef yyget_out
#define hana_get_out_ALREADY_DEFINED
#else
#define yyget_out hana_get_out
#endif

#ifdef yyset_out
#define hana_set_out_ALREADY_DEFINED
#else
#define yyset_out hana_set_out
#endif

#ifdef yyget_leng
#define hana_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hana_get_leng
#endif

#ifdef yyget_text
#define hana_get_text_ALREADY_DEFINED
#else
#define yyget_text hana_get_text
#endif

#ifdef yyget_lineno
#define hana_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hana_get_lineno
#endif

#ifdef yyset_lineno
#define hana_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hana_set_lineno
#endif

#ifdef yyget_column
#define hana_get_column_ALREADY_DEFINED
#else
#define yyget_column hana_get_column
#endif

#ifdef yyset_column
#define hana_set_column_ALREADY_DEFINED
#else
#define yyset_column hana_set_column
#endif

#ifdef yywrap
#define hana_wrap_ALREADY_DEFINED
#else
#define yywrap hana_wrap
#endif

#ifdef yyget_lval
#define hana_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hana_get_lval
#endif

#ifdef yyset_lval
#define hana_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hana_set_lval
#endif

#ifdef yyget_lloc
#define hana_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hana_get_lloc
#endif

#ifdef yyset_lloc
#define hana_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hana_set_lloc
#endif

#ifdef yyalloc
#define hana_alloc_ALREADY_DEFINED
#else
#define yyalloc hana_alloc
#endif

#ifdef yyrealloc
#define hana_realloc_ALREADY_DEFINED
#else
#define yyrealloc hana_realloc
#endif

#ifdef yyfree
#define hana_free_ALREADY_DEFINED
#else
#define yyfree hana_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hana_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 273
#define YY_END_OF_BUFFER 274
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1097] =
    {   0,
      270,  270,    0,    0,  254,  254,    0,    0,  274,  272,
      259,  259,  260,  272,  258,  260,  251,  260,  260,  260,
      242,  242,  266,  262,  264,  271,  257,  257,  257,  257,
      257,  257,   54,  257,  257,  257,   69,  257,   73,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  260,  273,  254,  255,  259,  268,    0,    0,
      258,  258,  247,    0,  246,  242,    0,    0,  265,  267,
      269,  263,  257,  257,  257,  257,  257,    5,  257,  257,
      257,  257,  257,  257,   13,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  234,
      257,   59,   67,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  252,  257,  257,   84,  257,
      257,  257,  257,  257,   90,   91,   93,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  128,
      257,  257,  223,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  261,  254,  253,  256,    0,    0,  246,
        0,    0,  243,  241,    1,  257,    2,    3,  257,  257,
        6,    7,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   33,   34,  257,  257,
      257,  257,  257,  257,  257,   43,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,   51,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,   62,  257,  257,
      155,  191,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,   74,  257,  257,   75,   77,  257,  257,  257,
      257,  257,   85,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  150,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  107,  257,  257,  257,

      257,  257,  109,  257,  257,  257,  257,  257,  116,  257,
      257,  257,  257,  257,  257,  257,  257,  122,  257,  257,
      257,  257,  257,  257,  257,  146,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  180,
      257,  257,  257,  257,  238,  257,  257,    0,  245,    0,
        0,    0,  244,  257,  257,  257,  257,  257,  211,  257,
      257,  257,  257,  257,   11,  257,   16,   14,   15,   17,
       20,  257,  257,  257,  257,  257,  257,  176,  257,  257,
      210,  257,  257,   32,  257,  257,  257,  257,   39,  257,
      257,   42,  257,  257,  257,  257,  257,  257,  257,  257,

      222,  257,  257,  257,   52,   53,  257,  257,  147,  257,
       58,  257,  257,  257,  257,   66,   68,  237,  257,  175,
      257,  192,   71,   72,  257,  257,  231,  149,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  240,  257,  257,  257,  257,  257,  257,   92,  257,
      257,  257,  257,   97,  257,  257,  257,  257,  257,  257,
      257,  257,  103,  104,  105,  257,  257,  257,  257,  257,
      257,  257,  110,  257,  257,  257,  257,  257,  257,  117,
      257,  257,  257,  119,  225,  257,  257,  257,  257,  257,
      257,  257,  161,  124,  125,  126,  257,  257,  206,  248,

      257,  257,  257,  257,  257,  257,  170,  257,  257,  257,
      257,  257,  257,  257,  235,  257,  138,  257,  140,  142,
      143,  258,  257,  257,    4,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,   26,   27,  257,  257,  257,  257,  257,  257,
      257,  257,   44,  257,  187,  257,  257,  257,  257,  250,
      174,   49,  257,   55,  257,  257,  257,   60,  257,  257,
      257,   70,  257,  257,  144,  257,  257,  257,  257,  257,
      226,  257,   78,  257,  257,  257,   82,   83,  257,  257,
      199,  257,  173,  257,  257,  257,  257,  257,  257,   94,

      257,  257,   96,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  102,  257,  257,  257,  257,  108,  257,
      257,  257,  112,  257,  257,  257,  257,  230,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      214,  257,  130,  257,  257,  257,  257,  132,  257,  172,
      257,  257,  257,  257,  257,  257,  139,  257,  257,  257,
      257,  257,  257,  257,    9,   10,  257,  257,  257,  257,
      257,  257,  257,  233,  257,  257,  257,  257,  257,  257,
      257,  257,   37,  257,  257,   41,   45,   46,  257,   48,
      257,  257,  257,  257,   57,  257,  229,   61,  257,  257,

      257,  257,  257,  257,  228,  257,  178,  182,   76,  257,
      257,  257,  257,  236,  257,   86,  257,  257,   88,  257,
       89,  145,  257,   95,  257,  257,  257,  257,  257,  257,
      257,  217,  257,  257,  257,  257,  257,  219,  188,  209,
      257,  257,  113,  114,  257,  257,  257,  257,  257,  179,
      257,  257,  257,  257,  171,  257,  257,  257,  257,  257,
      257,  167,  131,  152,  257,  133,  257,  257,  257,  257,
      257,  257,  207,  257,  257,  257,  213,  257,    8,  190,
      162,   12,  257,  257,  257,   23,  257,   24,  257,  257,
      257,   29,   35,   36,  257,  257,   47,  195,  257,  257,

      257,  168,   63,  257,  257,  257,  189,  257,  224,  257,
      257,  257,   81,  257,   87,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  154,  257,  257,  257,  153,
      257,  239,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  159,
      257,  249,  257,  257,  134,  135,  136,  257,  257,  141,
      163,  257,  257,  257,   21,  257,  157,  257,  257,  257,
      257,  257,   40,  257,  257,   56,  257,   65,  257,  257,
      215,   79,   80,  257,  151,  257,  257,  257,  220,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      227,  257,  257,  257,  257,  257,  257,  118,  257,  257,
      257,  257,  257,  212,  257,  257,  257,  257,  257,  257,
      257,  257,  137,  257,  257,  186,   18,  257,  257,  257,
       28,  257,  257,  257,  257,   50,   64,  257,  257,  198,
      257,  257,  257,  257,   98,  257,  257,  100,  101,  257,
      257,  106,  257,  257,  257,  257,  257,  257,  165,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  127,
      129,  257,  164,  257,  257,   19,   22,  257,  257,  257,
      257,   38,  257,  197,  257,  257,  166,  169,  156,  257,
      257,  257,  257,  257,  216,  111,  158,  257,  257,  257,

      120,  257,  181,  218,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  196,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  121,  257,  183,
      123,  185,  221,  257,  257,  257,  257,  257,  257,   31,
      257,  257,  257,  257,   99,  257,  257,  257,  257,  115,
      160,  257,  232,  194,  257,   25,  177,  257,  257,  257,
      257,  257,  257,  257,  257,  208,  257,  257,  257,  200,
      257,  257,  257,  257,  257,  257,  203,  257,  257,  257,
      204,  205,  257,  257,  202,  184,  257,  257,  193,  257,
       30,  257,  148,  257,  201,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    8,    8,    9,    8,
        8,   10,   11,    8,   12,   13,   14,   15,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    8,    8,   17,
       18,   19,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        8,   47,    8,    8,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   37,   65,   66,   67,   68,   69,   70,   71,
       72,   73,    8,   74,    8,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    4,    1,
        5,    1,    1,    1,    6,    6,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    8,    7,    6,    6,
        6,    6,    6,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1
    } ;

static const flex_int16_t yy_base[1106] =
    {   0,
        0,    0,    0,    0,  501,  499,    0,    0,  505, 2247,
       73,   76,  480,  470,    0, 2247, 2247,  454,   66,  443,
       70,   74,   73,  408,  404, 2247,  110,  159,  211,   72,
       66,  259,   46,   67,  116,   73,   69,  132,  172,  319,
      367,  162,    0,  185,  414,  466,  211,   82,  233,   73,
       92,   84,  345, 2247,    0,  406,  156, 2247,  405,  375,
        0,    0,  240,    0,  280,  286,  187,    0, 2247, 2247,
     2247, 2247,    0,  173,  172,  102,  125,  141,  209,  209,
      291,  258,  218,  224,    0,  275,  249,  249,  511,  269,
      288,  278,  340,  191,  268,  278,  282,  292,  374,  305,

      339,  312,  378,  313,  320,  320,  304,  330,  310,    0,
      350,  406,    0,  356,  363,  379,  423,  431,  397,  397,
      459,  450,  430,  445,  452, 2247,  393,  468,  466,  485,
      505,  497,  490,  511,  499,  515,  503,  511,  404,  529,
      512,  518,  532,  524,  569,  532,  537,  535,  561,  553,
      570,  573,  572,  581,  574,  572,  573,  579,  614,  589,
      614,  628,  606,  635,  618,  614,  620,  632,  638,  614,
      633,  645,  634, 2247,    0, 2247,  361,  686,  352,  684,
      692,  501,  668,    0,    0,  658,    0,    0,  663,  684,
        0,    0,  685,  676,  672,  670,  686,  695,  695,  686,

      687,  696,  686,  698,  690,  700,  694,  694,  716,  694,
      707,  713,  717,  735,  726,  736,    0,  736,  745,  742,
      732,  745,  732,  751,  749,  277,  754,  753,  752,  741,
      743,  743,  746,  747,  766,  758,    0,  759,  765,  759,
      781,  774,  776,  779,  776,  794,  796,  797,  789,  790,
        0,    0,  799,  788,  804,  806,  794,  806,  806,  815,
      795,  814,    0,  813,  823,  807,    0,  813,  816,  837,
      841,  833,    0,  848,  255,  839,  840,  851,  841,  856,
      843,  857,  846,    0,  841,  862,  863,  864,  855,  874,
      875,  895,  868,  900,  898,  866,    0,  876,  892,  894,

      897,  896,  915,  901,  904,  915,  913,  905,  906,  909,
      910,  919,  932,  921,  940,  948,  943,    0,  929,  941,
      936,  944,  941,  959,  941,    0,  966,  957,  966,  958,
      959,  961,  972,  977,  974,  964,  966,  964,  967, 1010,
      971,  987,  986,  989,    0,  992, 1009,  715,  887,  273,
       99, 1021, 1024, 1020, 1014, 1001, 1010, 1012,    0, 1024,
     1016, 1014, 1024, 1031,    0, 1034,    0,    0,    0, 1042,
        0, 1039,  224, 1044, 1037, 1046, 1043, 1049, 1036, 1041,
        0,  220, 1045,    0, 1050, 1044, 1046, 1063,    0, 1060,
     1058,    0, 1063, 1064, 1064, 1065, 1064, 1066, 1087, 1084,

        0, 1074, 1075, 1075,    0,    0, 1083, 1086,    0, 1086,
        0, 1085, 1086, 1087, 1107,    0,    0,    0, 1101,  218,
     1092,    0,    0,    0, 1099, 1100, 1110,    0, 1115, 1125,
     1128, 1116, 1130, 1130, 1125, 1126, 1127, 1139, 1139, 1128,
     1148, 1146, 1139, 1155, 1156, 1146, 1150, 1155,    0, 1155,
     1160, 1160, 1161, 1167, 1162, 1171, 1177, 1185, 1184, 1194,
     1181, 1193,    0,    0,    0, 1183, 1198, 1192, 1189, 1189,
     1190, 1198,    0, 1200, 1210, 1203, 1216, 1215, 1216,    0,
     1224, 1211, 1221,    0,    0, 1230, 1223, 1236, 1224, 1225,
     1241, 1244,  215,    0,    0, 1232, 1243, 1242,    0,    0,

     1235, 1245, 1245, 1243, 1244, 1248,    0, 1262, 1261, 1267,
     1264, 1267, 1267, 1265,    0, 1271,    0, 1280, 1277,    0,
        0, 2247, 1276, 1291,    0, 1292, 1278, 1291, 1282, 1280,
     1292, 1284, 1309, 1309, 1296, 1295, 1297, 1299, 1312, 1307,
     1308, 1309,    0,    0, 1326, 1317, 1332, 1324, 1332,  180,
     1325, 1336,    0, 1340,    0, 1327, 1344, 1331, 1348,    0,
      178,    0, 1330, 1347, 1350, 1342, 1357,    0, 1346, 1358,
     1349,    0, 1348, 1371,    0, 1370, 1374, 1376, 1368, 1368,
        0, 1378,    0, 1373, 1374, 1393,    0,    0, 1376, 1398,
        0, 1395,    0, 1393, 1396, 1387, 1390, 1393, 1394,    0,

     1404, 1396,    0, 1409, 1411, 1416, 1404, 1411, 1422, 1409,
     1407, 1418, 1424,  175, 1421, 1435, 1423, 1430,    0, 1429,
     1426, 1429,    0, 1448, 1436, 1438, 1444,    0, 1441, 1460,
     1440, 1461, 1451, 1457, 1456, 1465, 1462, 1473, 1462, 1471,
        0, 1472,    0, 1467, 1471, 1488, 1475,    0, 1486, 1482,
     1490, 1504, 1496, 1496, 1511, 1495,    0, 1502, 1498, 1499,
     1522, 1519, 1513, 1512,    0,    0, 1522, 1511, 1520, 1516,
     1534, 1527, 1538,    0, 1531, 1528, 1533, 1534, 1546, 1539,
     1544, 1540,    0, 1543, 1561,    0,    0,    0, 1561,    0,
     1548, 1548, 1563, 1560,    0, 1551,    0,    0, 1561, 1575,

     1580, 1581, 1573,  170,    0, 1570,    0,    0,    0, 1578,
     1586, 1592, 1584,    0, 1586,    0, 1596, 1600,    0, 1599,
        0,    0, 1593,    0, 1603, 1606, 1594, 1603, 1595, 1608,
     1611,    0, 1597,  138, 1605, 1616, 1623, 1611, 1612,    0,
     1620, 1623, 1633,    0,  129, 1624, 1638, 1639, 1632,  125,
      121, 1630,  117, 1646,  114, 1651, 1645, 1654, 1639, 1656,
     1647,    0,    0,    0, 1658,    0, 1666, 1651, 1663, 1657,
     1663, 1672,    0, 1659, 1668, 1664,    0, 1673,    0,    0,
        0,    0, 1682, 1685, 1683,    0, 1675,    0, 1682, 1694,
     1683,  108,    0,    0, 1699, 1683,    0,    0, 1706, 1694,

     1703,    0,    0, 1709, 1702, 1704,    0, 1701,    0, 1712,
     1702, 1711,    0, 1705,    0, 1713, 1710, 1723, 1724, 1714,
     1729, 1724, 1738, 1727, 1728,    0, 1732, 1745, 1732,  106,
     1750,    0, 1737, 1757, 1762, 1759,  103, 1744, 1767, 1752,
     1758, 1772, 1761, 1762, 1770, 1765, 1775, 1777, 1777,    0,
     1787,    0, 1775, 1778,    0,    0,    0, 1781, 1796,    0,
        0, 1794, 1796, 1790,    0, 1789,    0, 1797, 1813, 1799,
     1806, 1801,    0, 1810, 1817,    0, 1809,    0, 1809, 1827,
        0,    0,    0, 1829,    0, 1834, 1820, 1824,    0, 1823,
     1830, 1833, 1829, 1841, 1835, 1850, 1836, 1853, 1843, 1843,

        0, 1854, 1844, 1860, 1850, 1855, 1869,    0, 1865, 1880,
     1876, 1879, 1880,    0, 1880, 1873, 1877, 1875, 1880, 1895,
     1881, 1878,    0,   85, 1889,    0, 1888, 1891, 1901, 1896,
        0, 1906, 1899, 1905, 1899,    0,    0, 1918, 1918,    0,
     1921, 1904, 1924, 1916,    0, 1931, 1937,    0,    0, 1922,
     1922,    0, 1941, 1929, 1931, 1945, 1940, 1936,    0, 1944,
     1942, 1947, 1954, 1959, 1958, 1955, 1965, 1959, 1967,    0,
        0, 1972,    0, 1976, 1965,    0,    0, 1972, 1970, 1971,
     1982,    0, 1985,    0, 1987, 1975,    0,    0,    0,   72,
     1981, 1977, 1984, 1996,    0,    0,    0, 1986, 1999, 2007,

        0, 1994,    0,    0, 2008, 2009, 1998, 2012, 2001, 2009,
     2003,   70, 2012, 2026, 2023, 2012,    0, 2010,   67, 2036,
     2024, 2028, 2035, 2042, 2043, 2033, 2037,    0, 2029,    0,
        0,    0,    0, 2042, 2052, 2042, 2053, 2050, 2047,    0,
     2053, 2053, 2058, 2065,    0, 2059, 2078, 2059, 2066,    0,
        0, 2069,    0,    0, 2081,    0,    0, 2074, 2077, 2086,
     2082, 2080, 2091, 2083, 2088,    0, 2089, 2092, 2107,    0,
     2105, 2094, 2112, 2101, 2108, 2102,    0, 2118, 2112, 2122,
        0,    0, 2115, 2116,    0,    0, 2119, 2113,    0, 2124,
        0, 2123,    0, 2124,    0, 2247, 2189, 2197, 2205, 2212,

     2215, 2222, 2230,   98, 2238
    } ;

static const flex_int16_t yy_def[1106] =
    {   0,
     1096,    1, 1097, 1097, 1098, 1098, 1097, 1097, 1096, 1096,
     1096, 1096, 1096, 1099, 1100, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1096, 1096, 1102, 1096, 1096, 1096, 1099, 1096,
     1100, 1100, 1096, 1103, 1096, 1096, 1096, 1104, 1096, 1096,
     1096, 1096, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1096, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1096, 1102, 1096, 1096, 1096, 1105, 1096,
     1096, 1096, 1096, 1104, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1096, 1096, 1105,
     1105, 1096, 1096, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1096, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,

     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101,    0, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096
    } ;

static const flex_int16_t yy_nxt[2322] =
    {   0,
       10,   11,   12,   11,   13,   14,   15,   16,   17,   16,
       16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   10,   43,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   44,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   57,   57,   57,   57,   57,   57,
       63,   63,   65,  106,   66,   66,   65,  107,   66,   66,
       69,   70,   92,  116,   67,  108,   93,   96,   67,   97,

       94,  109,  166,  184,   98,  171,   95,  114,  351,   99,
      106,  115,  522,   68, 1042,  107,  172, 1036,  173, 1020,
       92,  116,   67,  108,   93,   96,   67,   97,   94,  109,
      166,   98,  974,  171,   95,  114,   99,  189,  115,  110,
       68,   74,  111,   75,  172,   76,  173,   77,   78,  112,
      905,   79,  117,  899,  113,  871,  118,   57,   57,   57,
      119,  846,  190,  191,  844,  189,  120,  110,  842,   74,
      111,   75,  841,   76,   77,   78,  836,  112,   79,   80,
      117,  113,  141,   81,  118,  827,  142,   82,  119,  190,
       83,  191,  121,   84,  120,  187,  122,  182,  182,  143,

      123,  183,  183,   85,  185,  144,  124,   80,  186,  145,
      141,   81,  125,  146,  142,   82,  188,  808,   83,  147,
      121,   84,  735,  187,  122,  692,  143,  684,  123,  223,
       85,   86,  185,  144,  124,  192,  186,  145,   87,  125,
      193,  146,   88,  188,  162,   89,  163,  147,   90,  164,
      165,   91,  199,  167,   63,   63,  223,  168,  200,   86,
      169,  170,  638,  192,  178,  573,   87,  545,  193,  203,
       88,  536,  162,   89,  163,   90,  164,  165,   91,  100,
      199,  167,  351,  204,  197,  168,  200,  101,  169,  170,
      102,  198,  178,  103,  180,  180,  104,  203,   65,  105,

       66,   66,  440,  212,  181,  226,  201,  100,  224,  213,
       67,  204,  197,  202,  227,  101,  225,  216,  102,  198,
      214,  103,  217,  104,  393,  215,  105,  126,  194,  195,
      196,  212,  181,  226,  201,  224,  232,  213,   67,  127,
      202,  128,  227,  225,  216,  241,  235,  238,  214,  217,
      244,  239,  215,  129,  240,  194,  195,  196,  130,  131,
      132,  351,  218,  242,  232,  219,   59,  127,  243,  128,
      233,  220,  241,  221,  235,  238,  234,  244,  222,  239,
       59,  129,  240,  245,  249,  130,  131,  132,  133,  134,
      218,  242,  135,  219,  228,  243,  229,  250,  233,  220,

      136,  221,  230,  234,  137,  222,  138,  139,  140,  236,
      177,  245,  249,  231,  176,  237,  133,  134,  174,  260,
      135,   72,  228,  251,  229,  250,   71,  258,  136,  259,
      230,  137,  270,  138,  139,  140,  148,  236,  149,  246,
      231,  150,  237,  288,  247,  248,  151,  260,  152,  252,
      251,  256,   64,  153,  154,  258,  257,  259,  155,  270,
      253,  254,  255,  266,  148,   62,  149,  246,  267,  150,
      288,  247,  248,  264,  151,   60,  152,  252,  268,  256,
      153,  154,  265,  269,  257,  155,  156,  253,  254,  255,
      157,  266,  261,  158,  159,  271,  267,   58,  262,  272,

      160,  264,  263,  161, 1096,  273,  268,   56,  274,   56,
      265,  269,  275,  276,  156,  183,  183,  279,  157,  280,
      261,  158,  159,  271,  283,  262,  286,  272,  160,  263,
      161,  205,  273,  281,  206,  274,  277,  278,  287,  284,
      275,  276,  207,  208,  209,  279,  285,  280,  210,  290,
      282,  211,  283,  289,  286,  291,  292,  294,  301,  205,
      293,  281,  206, 1096,  277,  278,  287,  284,  302,  304,
      207,  208,  209,  310,  285,  210,  290,  282,  211,  303,
     1096,  289,  291,  305,  292,  294,  301,  311,  293,  295,
      312,  296,  306,  320,  297,  315,  302,  304,  307,  308,

      309,  310,  317,  322,  298,  313,  303,  299,  300,  316,
      314,  305,  319,  318, 1096,  311,  321,  295,  312,  296,
      306,  320,  297,  315,  326,  307,  308,  309,  327,  334,
      317,  322,  298,  313,  299,  300,  316,  314,  323,  319,
      338,  318,  328,  321,  335,  339,  324,  325,  341,  330,
     1096,  340,  326,  344,  329,  327,  331,  334,  332,  336,
      342,  333,  343,  337,  345,  346,  323,  347,  338, 1096,
      328,  335, 1096,  339,  324,  325,  341,  330,  340, 1096,
      344,  329,  183,  183,  331,  354,  332,  336,  342,  333,
      343,  337,  345,  346,  355,  347,  348,  348,  180,  180,

      349,  349,  352,  352,  356,  357,  353,  353,  181,  358,
     1096,  359,  360,  354,  361,  362,  365,  366,  367,  371,
      368,  372,  355,  370,  373,  374,  375, 1096,  363,  349,
      349,  378,  356,  357,  364,  369,  181,  358,  359,  360,
      379,  381,  361,  362,  365,  366,  367,  371,  368,  372,
      370,  380,  373,  374,  375,  376,  363,  377,  378,  382,
      384,  364,  369,  383,  385,  386,  387,  389,  379,  381,
      388,  390,  391,  392,  394,  395,  396,  401,  380,  398,
      399,  400,  376,  397,  377,  402,  403,  382,  384,  404,
      383,  405,  385,  386,  387,  389,  406,  388,  390,  407,

      391,  392,  394,  395,  396,  401,  398,  399,  400,  408,
      412,  397,  402,  409,  403,  410,  411,  404,  413,  405,
      414,  415,  417,  418,  406,  419,  407,  420,  421,  422,
      424,  416, 1096,  423,  425,  426,  429,  408,  412,  428,
      409,  430,  410,  411,  431,  427,  413,  432,  414,  415,
      417,  418,  433,  419,  420,  434,  421,  422,  424,  416,
      423,  437,  425,  426,  429,  435,  428,  438,  439,  430,
      441,  442,  431,  427,  432,  443, 1096,  436,  444,  433,
      445,  447,  434,  446,  448,  449,  450,  452,  453,  437,
      451, 1096,  454,  435,  455,  438,  439,  457,  441,  442,

      460,  349,  349,  443,  436,  444,  466,  467,  445,  447,
      446,  448,  449,  456,  450,  452,  453,  458,  451,  454,
      459,  464,  455,  461,  470,  457,  462,  471,  460,  465,
      463, 1096,  468,  466,  469,  467,  475,  472,  476,  477,
      456,  478, 1096,  479,  480,  458,  481,  482,  459,  464,
      483,  461,  470,  473,  462,  471,  484,  465,  463,  468,
      485,  469,  474,  486,  475,  472,  476,  477,  491,  478,
      479,  480,  492,  481,  482,  493,  487,  494,  483,  495,
      473,  489,  490,  496,  484,  497,  498,  485,  488,  499,
      500,  486,  501,  502,  503,  491,  504,  505,  506,  508,

      492,  507,  493,  509,  487,  494,  495,  510,  489,  490,
      515,  496,  497,  516,  498,  488,  519,  499,  500,  517,
      501,  502,  503,  518,  504,  505,  506,  508,  507,  520,
      509,  511,  512,  521,  510,  353,  353,  515,  353,  353,
      523,  516,  524,  526,  519,  525,  527,  517,  528,  529,
      518,  530,  531, 1096,  513,  532,  520,  514,  533,  511,
      512,  521,  534,  535,  537,  538,  539,  540,  523,  546,
      524,  526,  525,  541,  527,  543,  528,  529,  530,  544,
      531,  513,  547,  532,  548,  549,  533,  550,  551,  552,
      534,  535,  537,  538,  539,  540,  542,  546,  553,  554,

      556,  541,  543,  555,  557,  558,  544,  559,  560,  563,
      547,  548,  549,  561,  562,  550,  551,  552,  564,  565,
      566, 1096,  567,  568,  569,  572,  553,  554,  556,  574,
      555,  557,  558,  570,  577,  559,  560,  563,  575,  576,
      561,  562,  578, 1096,  571,  579,  564,  565,  566,  567,
      568,  569,  580,  572,  581,  582,  574,  583,  584,  585,
      588,  570,  577,  586,  587,  575,  576,  589, 1096,  590,
      578,  571,  591,  579,  592, 1096,  594,  595,  596,  599,
      580,  581,  582,  597,  593,  583,  584,  585,  588,  598,
      586,  587,  600,  601,  606,  589,  590,  602,  603,  607,

      591,  608,  592,  594,  604,  595,  596,  599,  605,  609,
      597,  593,  611,  610,  612,  613,  598,  614,  616,  600,
      615,  601,  606,  617,  602,  603,  618,  607,  619,  608,
      620,  604,  621,  622,  623,  605,  624,  609,  625,  626,
      611,  610,  612,  613,  627,  614,  616,  615,  628, 1096,
      629,  617,  630,  618,  631,  619,  632,  620,  633,  635,
      621,  622,  623,  634,  624,  636,  625,  626,  637, 1096,
      639,  640,  627,  641, 1096,  642,  628,  629,  643,  644,
      630,  645,  631,  646,  632,  647,  633,  635,  648,  649,
      634,  650,  651,  636,  652,  653,  637,  639,  656,  640,

      654,  641,  642,  655,  657,  658,  643,  644,  645,  660,
      646,  659,  647,  661,  662,  664,  648,  649,  663,  650,
      651,  665,  652,  653,  666,  667,  656,  668,  654,  669,
      655,  670,  657,  658,  671,  672,  673,  660,  674,  659,
      675,  661,  662,  664,  676,  663,  677,  678,  665,  679,
      680,  666,  681,  667,  668,  682,  683,  669,  685,  670,
      686,  671,  672,  673,  687,  674,  688,  689,  675,  690,
      691,  676,  693,  677,  678,  694,  695,  679,  680,  696,
      681,  697,  699,  682,  683,  698,  685,  700,  686,  702,
      701,  703,  687,  688,  704,  689,  690,  705,  691,  693,

      706,  707,  709,  694,  695,  708,  696,  712,  710,  697,
      699,  711,  698,  713,  700,  714,  702,  701,  715,  703,
      716,  717,  704,  718,  723,  705,  719,  720,  706,  707,
      709,  721,  708,  722,  724,  712,  710,  725,  711,  726,
      727,  713,  714,  728,  729,  730,  715,  731,  716,  717,
      732,  718,  723,  719,  720,  733,  734,  737,  721,  736,
      722,  724,  738,  739,  740,  725,  741,  726,  727,  742,
      728,  743,  729,  730,  731,  744,  745,  732,  746, 1096,
      747,  750,  733,  748,  734,  737,  736,  751,  749,  738,
      752,  739,  740,  741,  753,  754,  742,  755,  757,  743,

      756,  758,  744,  745,  759,  760,  746,  747,  750,  761,
      762,  748,  763, 1096,  764,  751,  749,  752,  765, 1096,
      766,  753,  754,  767,  768,  755,  757,  756,  758,  769,
      770,  771,  759,  760,  772,  773,  761,  762,  774,  775,
      763,  764,  776,  777,  778,  779,  765,  766,  780, 1096,
      781,  767,  768,  782, 1096,  783,  784,  769,  770,  771,
      785,  772,  786,  773,  787,  774,  775,  788,  789,  790,
      776,  777,  778,  779,  791,  793,  780,  781,  792,  794,
      795,  782,  783,  796,  784,  797, 1096,  798,  785,  799,
      786,  800,  787,  801,  788,  802,  789,  790,  803,  804,

      805,  806,  791,  793,  807,  792,  794,  795,  809,  810,
      811,  796,  812,  797,  798,  813,  799,  814,  815,  800,
      816,  801,  802,  817,  818,  803,  819,  804,  805,  806,
      820,  822,  807,  821,  823,  809,  824,  810,  811,  825,
      812,  826,  828,  813,  829,  814,  815,  830,  816,  831,
      832,  817,  818,  833,  819,  834,  835,  837,  820,  822,
      821,  823,  838,  839,  824,  840,  845,  825,  826,  828,
      843,  847,  829,  848,  849,  830,  831,  832,  850,  851,
      852,  833,  853,  834,  835,  837,  854, 1096,  855,  856,
      838,  839,  857,  840,  845,  858,  859,  843,  860,  847,

      861,  848,  849,  862,  863,  850,  864,  851,  852,  865,
      853,  866, 1096,  867,  854,  855,  868,  856,  869,  872,
      857,  870,  873,  858,  859,  860,  874,  875,  861,  876,
      862,  877,  863,  878,  864,  879,  881,  865,  880,  866,
      867,  882,  883,  886,  868,  884,  869,  872,  870,  873,
      885,  887,  888,  890,  874,  875,  889,  876,  891,  877,
      894,  878,  895,  879,  881,  880,  892,  896,  882,  897,
      883,  886,  884,  898,  900, 1096,  901,  885,  902,  887,
      888,  890,  903,  889,  904,  893,  891,  906,  894,  907,
      895,  908,  911,  909,  892,  896,  910,  897,  912,  913,

      898,  914,  900,  901,  915,  916,  902,  917,  918,  919,
      903,  920,  904,  921,  906,  922,  923,  907,  908,  924,
      911,  909,  925,  910,  926,  912,  913,  927,  928,  914,
      929,  915,  916,  930,  934,  917,  918,  919,  931,  920,
      921,  935,  922,  936,  923,  932,  933,  924,  937,  938,
      925,  939,  926,  940,  927,  928,  941,  943,  929,  942,
      944,  930,  934,  945,  946,  931,  947,  948,  949,  935,
      950,  936,  932,  933,  951,  937,  938,  952,  955,  939,
      953,  940,  954,  956,  941,  943,  942,  944,  957, 1096,
      958,  945,  946,  947,  959,  948,  949,  960,  950,  961,

      962,  951,  963,  964,  965,  952,  955,  953,  966,  954,
      956,  967,  968, 1096,  969,  970,  957,  958,  971, 1096,
      972,  959,  973,  975,  978,  960,  976,  961,  962,  977,
      963,  964,  965,  979,  980,  982,  966,  981,  967,  983,
      968,  969,  984,  970,  985,  986,  971,  972,  987,  973,
      988,  975,  978,  976,  989,  990,  977,  991, 1096,  992,
      979,  993,  980,  982,  981,  994,  983,  995,  996,  997,
      984,  998,  985,  986,  999,  987, 1000, 1001,  988, 1002,
     1003,  989, 1004,  990, 1005,  991,  992, 1006,  993, 1007,
     1008, 1009, 1010,  994,  995,  996, 1011,  997, 1012,  998,

     1013,  999, 1014, 1015, 1000, 1001, 1016, 1002, 1003, 1017,
     1004, 1018, 1005, 1019, 1021, 1006, 1022, 1007, 1008, 1009,
     1010, 1023, 1024, 1026, 1011, 1025, 1012, 1027, 1013, 1028,
     1014, 1015, 1029, 1030, 1016, 1031, 1032, 1017, 1033, 1018,
     1019, 1034, 1021, 1022, 1035, 1037, 1038, 1039, 1023, 1040,
     1024, 1026, 1025, 1041, 1045, 1027, 1046, 1028, 1043, 1044,
     1029, 1030, 1031, 1047, 1032, 1033, 1048, 1049, 1051, 1034,
     1050, 1035, 1052, 1037, 1038, 1039, 1040, 1053, 1054, 1056,
     1041, 1055, 1045, 1057, 1046, 1058, 1043, 1044, 1059, 1096,
     1060, 1047, 1061, 1062, 1048, 1049, 1051, 1050, 1063, 1052,

     1064, 1096, 1065, 1066, 1067, 1053, 1054, 1056, 1055, 1068,
     1071, 1057, 1058, 1069, 1070, 1072, 1059, 1060, 1073, 1074,
     1061, 1062, 1075, 1076, 1078, 1063, 1077, 1079, 1064, 1065,
     1066, 1080, 1067, 1081, 1082, 1083, 1084, 1068, 1071, 1085,
     1069, 1070, 1086, 1072, 1087, 1073, 1088, 1074, 1089, 1075,
     1090, 1076, 1078, 1077, 1091, 1079, 1092, 1093, 1094, 1080,
     1081, 1095, 1082, 1083, 1084, 1096, 1085, 1096, 1096, 1096,
     1086, 1096, 1087, 1096, 1088, 1096, 1089, 1096, 1090, 1096,
     1096, 1096, 1091, 1092, 1096, 1093, 1094, 1096, 1095,   54,
       54,   54,   54,   54,   54,   54,   54,   55,   55,   55,

       55,   55,   55,   55,   55,   59, 1096,   59,   59,   59,
       59,   59,   61, 1096, 1096,   61,   61,   61,   61,   61,
       73,   73,  175,  175,  175, 1096,  175,  175,  175,  175,
      179,  179,  179,  179, 1096,  179,  179,  179,  350,  350,
      350,  350,  350,  350,  350,  350,    9, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096
    } ;

static const flex_int16_t yy_chk[2322] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,   11,   11,   11,   12,   12,   12,
       19,   19,   21,   33,   21,   21,   22,   34,   22,   22,
       23,   23,   30,   37,   21,   34,   30,   31,   22,   31,

       30,   34,   48, 1104,   31,   50,   30,   36,  351,   31,
       33,   36,  351,   21, 1019,   34,   51, 1012,   52,  990,
       30,   37,   21,   34,   30,   31,   22,   31,   30,   34,
       48,   31,  924,   50,   30,   36,   31,   76,   36,   35,
       21,   27,   35,   27,   51,   27,   52,   27,   27,   35,
      837,   27,   38,  830,   35,  792,   38,   57,   57,   57,
       38,  755,   77,   78,  753,   76,   38,   35,  751,   27,
       35,   27,  750,   27,   27,   27,  745,   35,   27,   28,
       38,   35,   42,   28,   38,  734,   42,   28,   38,   77,
       28,   78,   39,   28,   38,   75,   39,   67,   67,   42,

       39,   67,   67,   28,   74,   44,   39,   28,   74,   44,
       42,   28,   39,   44,   42,   28,   75,  704,   28,   44,
       39,   28,  614,   75,   39,  561,   42,  550,   39,   94,
       28,   29,   74,   44,   39,   79,   74,   44,   29,   39,
       80,   44,   29,   75,   47,   29,   47,   44,   29,   47,
       47,   29,   83,   49,   63,   63,   94,   49,   84,   29,
       49,   49,  493,   79,   63,  420,   29,  382,   80,   87,
       29,  373,   47,   29,   47,   29,   47,   47,   29,   32,
       83,   49,  350,   88,   82,   49,   84,   32,   49,   49,
       32,   82,   63,   32,   65,   65,   32,   87,   66,   32,

       66,   66,  275,   90,   65,   97,   86,   32,   95,   91,
       66,   88,   82,   86,   98,   32,   96,   92,   32,   82,
       91,   32,   92,   32,  226,   91,   32,   40,   81,   81,
       81,   90,   65,   97,   86,   95,  100,   91,   66,   40,
       86,   40,   98,   96,   92,  107,  102,  104,   91,   92,
      109,  105,   91,   40,  106,   81,   81,   81,   40,   40,
       40,  179,   93,  108,  100,   93,  177,   40,  108,   40,
      101,   93,  107,   93,  102,  104,  101,  109,   93,  105,
       60,   40,  106,  111,  114,   40,   40,   40,   41,   41,
       93,  108,   41,   93,   99,  108,   99,  115,  101,   93,

       41,   93,   99,  101,   41,   93,   41,   41,   41,  103,
       59,  111,  114,   99,   56,  103,   41,   41,   53,  120,
       41,   25,   99,  116,   99,  115,   24,  119,   41,  119,
       99,   41,  127,   41,   41,   41,   45,  103,   45,  112,
       99,   45,  103,  139,  112,  112,   45,  120,   45,  117,
      116,  118,   20,   45,   45,  119,  118,  119,   45,  127,
      117,  117,  117,  123,   45,   18,   45,  112,  124,   45,
      139,  112,  112,  122,   45,   14,   45,  117,  124,  118,
       45,   45,  122,  125,  118,   45,   46,  117,  117,  117,
       46,  123,  121,   46,   46,  128,  124,   13,  121,  128,

       46,  122,  121,   46,    9,  129,  124,    6,  129,    5,
      122,  125,  130,  130,   46,  182,  182,  132,   46,  133,
      121,   46,   46,  128,  135,  121,  137,  128,   46,  121,
       46,   89,  129,  134,   89,  129,  131,  131,  138,  136,
      130,  130,   89,   89,   89,  132,  136,  133,   89,  141,
      134,   89,  135,  140,  137,  142,  143,  144,  146,   89,
      143,  134,   89,    0,  131,  131,  138,  136,  147,  148,
       89,   89,   89,  150,  136,   89,  141,  134,   89,  147,
        0,  140,  142,  149,  143,  144,  146,  150,  143,  145,
      151,  145,  149,  156,  145,  153,  147,  148,  149,  149,

      149,  150,  154,  158,  145,  152,  147,  145,  145,  153,
      152,  149,  155,  154,    0,  150,  157,  145,  151,  145,
      149,  156,  145,  153,  160,  149,  149,  149,  160,  163,
      154,  158,  145,  152,  145,  145,  153,  152,  159,  155,
      165,  154,  161,  157,  163,  166,  159,  159,  167,  162,
        0,  166,  160,  170,  161,  160,  162,  163,  162,  164,
      168,  162,  169,  164,  171,  172,  159,  173,  165,    0,
      161,  163,    0,  166,  159,  159,  167,  162,  166,    0,
      170,  161,  183,  183,  162,  186,  162,  164,  168,  162,
      169,  164,  171,  172,  189,  173,  178,  178,  180,  180,

      178,  178,  181,  181,  190,  193,  181,  181,  180,  194,
        0,  195,  196,  186,  197,  198,  199,  200,  201,  204,
      202,  205,  189,  203,  206,  207,  208,    0,  198,  348,
      348,  210,  190,  193,  198,  202,  180,  194,  195,  196,
      211,  213,  197,  198,  199,  200,  201,  204,  202,  205,
      203,  212,  206,  207,  208,  209,  198,  209,  210,  214,
      216,  198,  202,  215,  218,  219,  220,  222,  211,  213,
      221,  223,  224,  225,  227,  228,  229,  233,  212,  230,
      231,  232,  209,  229,  209,  234,  235,  214,  216,  236,
      215,  238,  218,  219,  220,  222,  239,  221,  223,  240,

      224,  225,  227,  228,  229,  233,  230,  231,  232,  241,
      245,  229,  234,  242,  235,  243,  244,  236,  246,  238,
      247,  248,  249,  250,  239,  253,  240,  254,  255,  256,
      258,  248,    0,  257,  259,  260,  262,  241,  245,  261,
      242,  264,  243,  244,  265,  260,  246,  266,  247,  248,
      249,  250,  268,  253,  254,  269,  255,  256,  258,  248,
      257,  271,  259,  260,  262,  270,  261,  272,  274,  264,
      276,  277,  265,  260,  266,  278,    0,  270,  279,  268,
      280,  282,  269,  281,  283,  285,  286,  287,  288,  271,
      286,    0,  289,  270,  290,  272,  274,  291,  276,  277,

      293,  349,  349,  278,  270,  279,  296,  298,  280,  282,
      281,  283,  285,  290,  286,  287,  288,  292,  286,  289,
      292,  295,  290,  294,  301,  291,  294,  302,  293,  295,
      294,    0,  299,  296,  300,  298,  304,  303,  305,  306,
      290,  307,    0,  308,  309,  292,  310,  311,  292,  295,
      312,  294,  301,  303,  294,  302,  313,  295,  294,  299,
      314,  300,  303,  315,  304,  303,  305,  306,  319,  307,
      308,  309,  320,  310,  311,  321,  316,  322,  312,  323,
      303,  317,  317,  324,  313,  325,  327,  314,  316,  328,
      329,  315,  330,  331,  332,  319,  333,  334,  335,  337,

      320,  336,  321,  338,  316,  322,  323,  339,  317,  317,
      341,  324,  325,  342,  327,  316,  344,  328,  329,  343,
      330,  331,  332,  343,  333,  334,  335,  337,  336,  346,
      338,  340,  340,  347,  339,  352,  352,  341,  353,  353,
      354,  342,  355,  357,  344,  356,  358,  343,  360,  361,
      343,  362,  363,    0,  340,  364,  346,  340,  366,  340,
      340,  347,  370,  372,  374,  375,  376,  377,  354,  383,
      355,  357,  356,  378,  358,  379,  360,  361,  362,  380,
      363,  340,  385,  364,  386,  387,  366,  388,  390,  391,
      370,  372,  374,  375,  376,  377,  378,  383,  393,  394,

      396,  378,  379,  395,  397,  398,  380,  399,  400,  404,
      385,  386,  387,  402,  403,  388,  390,  391,  407,  408,
      410,    0,  412,  413,  414,  419,  393,  394,  396,  421,
      395,  397,  398,  415,  427,  399,  400,  404,  425,  426,
      402,  403,  429,    0,  415,  430,  407,  408,  410,  412,
      413,  414,  431,  419,  432,  432,  421,  433,  434,  435,
      438,  415,  427,  436,  437,  425,  426,  439,    0,  440,
      429,  415,  441,  430,  442,    0,  443,  444,  445,  448,
      431,  432,  432,  446,  442,  433,  434,  435,  438,  447,
      436,  437,  450,  451,  455,  439,  440,  452,  453,  456,

      441,  457,  442,  443,  454,  444,  445,  448,  454,  458,
      446,  442,  459,  458,  460,  461,  447,  462,  467,  450,
      466,  451,  455,  468,  452,  453,  469,  456,  470,  457,
      471,  454,  472,  474,  475,  454,  476,  458,  477,  478,
      459,  458,  460,  461,  479,  462,  467,  466,  481,    0,
      482,  468,  483,  469,  486,  470,  487,  471,  488,  490,
      472,  474,  475,  489,  476,  491,  477,  478,  492,    0,
      496,  497,  479,  498,    0,  501,  481,  482,  502,  503,
      483,  504,  486,  505,  487,  506,  488,  490,  508,  509,
      489,  510,  511,  491,  512,  513,  492,  496,  516,  497,

      514,  498,  501,  514,  518,  519,  502,  503,  504,  523,
      505,  519,  506,  524,  526,  528,  508,  509,  527,  510,
      511,  529,  512,  513,  530,  531,  516,  532,  514,  533,
      514,  534,  518,  519,  535,  536,  537,  523,  538,  519,
      539,  524,  526,  528,  540,  527,  541,  542,  529,  545,
      546,  530,  547,  531,  532,  548,  549,  533,  551,  534,
      552,  535,  536,  537,  554,  538,  556,  557,  539,  558,
      559,  540,  563,  541,  542,  564,  565,  545,  546,  566,
      547,  567,  570,  548,  549,  569,  551,  571,  552,  573,
      571,  574,  554,  556,  576,  557,  558,  577,  559,  563,

      578,  579,  582,  564,  565,  580,  566,  585,  584,  567,
      570,  584,  569,  586,  571,  589,  573,  571,  590,  574,
      592,  594,  576,  595,  601,  577,  596,  597,  578,  579,
      582,  598,  580,  599,  602,  585,  584,  604,  584,  605,
      606,  586,  589,  607,  608,  609,  590,  610,  592,  594,
      611,  595,  601,  596,  597,  612,  613,  616,  598,  615,
      599,  602,  617,  618,  620,  604,  621,  605,  606,  622,
      607,  624,  608,  609,  610,  625,  626,  611,  627,    0,
      629,  631,  612,  630,  613,  616,  615,  632,  630,  617,
      633,  618,  620,  621,  634,  635,  622,  636,  638,  624,

      637,  639,  625,  626,  640,  642,  627,  629,  631,  644,
      645,  630,  646,    0,  647,  632,  630,  633,  649,    0,
      650,  634,  635,  651,  652,  636,  638,  637,  639,  653,
      654,  655,  640,  642,  656,  658,  644,  645,  659,  660,
      646,  647,  661,  662,  663,  664,  649,  650,  667,    0,
      668,  651,  652,  669,    0,  670,  671,  653,  654,  655,
      672,  656,  673,  658,  675,  659,  660,  676,  677,  678,
      661,  662,  663,  664,  679,  681,  667,  668,  680,  682,
      684,  669,  670,  685,  671,  689,    0,  691,  672,  692,
      673,  693,  675,  694,  676,  696,  677,  678,  699,  700,

      701,  702,  679,  681,  703,  680,  682,  684,  706,  710,
      711,  685,  712,  689,  691,  713,  692,  715,  717,  693,
      718,  694,  696,  720,  723,  699,  725,  700,  701,  702,
      726,  728,  703,  727,  729,  706,  730,  710,  711,  731,
      712,  733,  735,  713,  736,  715,  717,  737,  718,  738,
      739,  720,  723,  741,  725,  742,  743,  746,  726,  728,
      727,  729,  747,  748,  730,  749,  754,  731,  733,  735,
      752,  756,  736,  757,  758,  737,  738,  739,  759,  760,
      761,  741,  765,  742,  743,  746,  767,    0,  768,  769,
      747,  748,  770,  749,  754,  771,  772,  752,  774,  756,

      775,  757,  758,  776,  778,  759,  783,  760,  761,  784,
      765,  785,    0,  787,  767,  768,  789,  769,  790,  795,
      770,  791,  796,  771,  772,  774,  799,  800,  775,  801,
      776,  804,  778,  805,  783,  806,  810,  784,  808,  785,
      787,  811,  812,  817,  789,  814,  790,  795,  791,  796,
      816,  818,  819,  821,  799,  800,  820,  801,  822,  804,
      824,  805,  825,  806,  810,  808,  823,  827,  811,  828,
      812,  817,  814,  829,  831,    0,  833,  816,  834,  818,
      819,  821,  835,  820,  836,  823,  822,  838,  824,  839,
      825,  840,  842,  841,  823,  827,  841,  828,  843,  844,

      829,  845,  831,  833,  846,  846,  834,  847,  848,  849,
      835,  851,  836,  853,  838,  854,  858,  839,  840,  859,
      842,  841,  862,  841,  863,  843,  844,  864,  866,  845,
      868,  846,  846,  869,  872,  847,  848,  849,  870,  851,
      853,  874,  854,  875,  858,  871,  871,  859,  877,  879,
      862,  880,  863,  884,  864,  866,  886,  888,  868,  887,
      890,  869,  872,  891,  892,  870,  893,  894,  895,  874,
      896,  875,  871,  871,  897,  877,  879,  898,  902,  880,
      899,  884,  900,  903,  886,  888,  887,  890,  904,    0,
      905,  891,  892,  893,  906,  894,  895,  907,  896,  909,

      910,  897,  911,  912,  913,  898,  902,  899,  915,  900,
      903,  916,  917,    0,  918,  919,  904,  905,  920,    0,
      921,  906,  922,  925,  929,  907,  927,  909,  910,  928,
      911,  912,  913,  930,  932,  934,  915,  933,  916,  935,
      917,  918,  938,  919,  939,  941,  920,  921,  942,  922,
      943,  925,  929,  927,  944,  946,  928,  947,    0,  950,
      930,  951,  932,  934,  933,  953,  935,  954,  955,  956,
      938,  957,  939,  941,  958,  942,  960,  961,  943,  962,
      963,  944,  964,  946,  965,  947,  950,  966,  951,  967,
      968,  969,  972,  953,  954,  955,  974,  956,  975,  957,

      978,  958,  979,  980,  960,  961,  981,  962,  963,  983,
      964,  985,  965,  986,  991,  966,  992,  967,  968,  969,
      972,  993,  994,  999,  974,  998,  975, 1000,  978, 1002,
      979,  980, 1005, 1006,  981, 1007, 1008,  983, 1009,  985,
      986, 1010,  991,  992, 1011, 1013, 1014, 1015,  993, 1016,
      994,  999,  998, 1018, 1021, 1000, 1022, 1002, 1020, 1020,
     1005, 1006, 1007, 1023, 1008, 1009, 1024, 1025, 1027, 1010,
     1026, 1011, 1029, 1013, 1014, 1015, 1016, 1034, 1035, 1037,
     1018, 1036, 1021, 1038, 1022, 1039, 1020, 1020, 1041,    0,
     1042, 1023, 1043, 1044, 1024, 1025, 1027, 1026, 1046, 1029,

     1047,    0, 1048, 1049, 1052, 1034, 1035, 1037, 1036, 1055,
     1060, 1038, 1039, 1058, 1059, 1061, 1041, 1042, 1062, 1063,
     1043, 1044, 1064, 1065, 1068, 1046, 1067, 1069, 1047, 1048,
     1049, 1071, 1052, 1072, 1073, 1074, 1075, 1055, 1060, 1076,
     1058, 1059, 1078, 1061, 1079, 1062, 1080, 1063, 1083, 1064,
     1084, 1065, 1068, 1067, 1087, 1069, 1088, 1090, 1092, 1071,
     1072, 1094, 1073, 1074, 1075,    0, 1076,    0,    0,    0,
     1078,    0, 1079,    0, 1080,    0, 1083,    0, 1084,    0,
        0,    0, 1087, 1088,    0, 1090, 1092,    0, 1094, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098,

     1098, 1098, 1098, 1098, 1098, 1099,    0, 1099, 1099, 1099,
     1099, 1099, 1100,    0,    0, 1100, 1100, 1100, 1100, 1100,
     1101, 1101, 1102, 1102, 1102,    0, 1102, 1102, 1102, 1102,
     1103, 1103, 1103, 1103,    0, 1103, 1103, 1103, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,

     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1096
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "sqlparser_hana.lex"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "sqlparser_hana.lex"

#include "node.h"
#include "sqlparser_hana_bison.h"
#include <stdio.h>
#include <sstream>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

std::string escape_double_quotation(const std::string& src, char c) {
    assert(c == '"' || c == '`' || c == ']');
    std::string ret = "";
    for (size_t i = 0; i < src.length(); ++i) {
        if (src[i] == c && src[1+i] == c) {
            ret += c;
            ++i;    // skip one
        }
        else
            ret += src[i];
    }
    return ret;
}

#define YY_USER_ACTION \
		yylloc->first_line = yylloc->last_line; \
		yylloc->first_column = yylloc->last_column; \
		for(int i = 0; yytext[i] != '\0'; i++) { \
				if(yytext[i] == '\n') { \
						yylloc->last_line++; \
						yylloc->last_column = 0; \
				} \
				else { \
						yylloc->last_column++; \
				} \
		}

#define TOKEN(name) { return HANA_##name; }
#define YYSTYPE         HANA_STYPE
#define YYLTYPE         HANA_LTYPE

#line 1584 "sqlparser_hana_flex.cpp"
/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1597 "sqlparser_hana_flex.cpp"

#define INITIAL 0
#define hint 1
#define sq 2
#define sb 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 113 "sqlparser_hana.lex"

#line 1884 "sqlparser_hana_flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1097 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1096 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 114 "sqlparser_hana.lex"
TOKEN(ALL)              /* SQL-2003-R */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "sqlparser_hana.lex"
TOKEN(AND)              /* SQL-2003-R */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "sqlparser_hana.lex"
TOKEN(ANY)              /* SQL-2003-R */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "sqlparser_hana.lex"
TOKEN(ARRAY)            /* SQL-2003-R */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "sqlparser_hana.lex"
TOKEN(AS)               /* SQL-2003-R */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "sqlparser_hana.lex"
TOKEN(ASC)              /* SQL-2003-N */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 120 "sqlparser_hana.lex"
TOKEN(AVG)              /* SQL-2003-N */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "sqlparser_hana.lex"
TOKEN(BETWEEN)          /* SQL-2003-R */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "sqlparser_hana.lex"
TOKEN(BIGINT)           /* SQL-2003-R */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "sqlparser_hana.lex"
TOKEN(BINARY)           /* SQL-2003-R */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "sqlparser_hana.lex"
TOKEN(BLOB)             /* SQL-2003-R */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 125 "sqlparser_hana.lex"
TOKEN(BOOLEAN)          /* SQL-2003-R */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "sqlparser_hana.lex"
TOKEN(BY)               /* SQL-2003-R */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "sqlparser_hana.lex"
TOKEN(CASE)             /* SQL-2003-R */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "sqlparser_hana.lex"
TOKEN(CAST)             /* SQL-2003-R */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "sqlparser_hana.lex"
TOKEN(CALL)             /* SQL-2003-R */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 130 "sqlparser_hana.lex"
TOKEN(CHAR)             /* SQL-2003-R */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 131 "sqlparser_hana.lex"
TOKEN(CHARACTER)        /* SQL-2003-R */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 132 "sqlparser_hana.lex"
TOKEN(CHARACTERS)       /* SQL-2003-N */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "sqlparser_hana.lex"
TOKEN(CLOB)             /* SQL-2003-R */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "sqlparser_hana.lex"
TOKEN(COALESCE)         /* SQL-2003-N */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 135 "sqlparser_hana.lex"
TOKEN(CODE_UNITS)       /* SQL-2003-N */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 136 "sqlparser_hana.lex"
TOKEN(COLLATE)          /* SQL-2003-R */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "sqlparser_hana.lex"
TOKEN(CONVERT)          /* SQL-2003-N */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 138 "sqlparser_hana.lex"
TOKEN(CORRESPONDING)    /* SQL-2003-R */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "sqlparser_hana.lex"
TOKEN(COUNT)            /* SQL-2003-N */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "sqlparser_hana.lex"
TOKEN(CROSS)            /* SQL-2003-R */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 141 "sqlparser_hana.lex"
TOKEN(CUME_DIST)        /* SQL-2003-N */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "sqlparser_hana.lex"
TOKEN(CURRENT)          /* SQL-2003-R */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "sqlparser_hana.lex"
TOKEN(CURRENT_TIMESTAMP)/* SQL-2003-R */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 144 "sqlparser_hana.lex"
TOKEN(CURRENT_USER)     /* SQL-2003-R */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 145 "sqlparser_hana.lex"
TOKEN(DATE)             /* SQL-2003-R */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 146 "sqlparser_hana.lex"
TOKEN(DAY)              /* SQL-2003-R */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 147 "sqlparser_hana.lex"
TOKEN(DEC)              /* SQL-2003-R */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 148 "sqlparser_hana.lex"
TOKEN(DECIMAL)          /* SQL-2003-R */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "sqlparser_hana.lex"
TOKEN(DEFAULT)          /* SQL-2003-R */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 150 "sqlparser_hana.lex"
TOKEN(DELETE)           /* SQL-2003-R */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 151 "sqlparser_hana.lex"
TOKEN(DENSE_RANK)       /* SQL-2003-N */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "sqlparser_hana.lex"
TOKEN(DESC)             /* SQL-2003-N */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "sqlparser_hana.lex"
TOKEN(DISTINCT)         /* SQL-2003-R */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "sqlparser_hana.lex"
TOKEN(DOUBLE)           /* SQL-2003-R */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "sqlparser_hana.lex"
TOKEN(ELSE)             /* SQL-2003-R */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "sqlparser_hana.lex"
TOKEN(END)              /* SQL-2003-R */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "sqlparser_hana.lex"
TOKEN(END_P)            /* LEX-INNER  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 158 "sqlparser_hana.lex"
TOKEN(ESCAPE)           /* SQL-2003-R */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 159 "sqlparser_hana.lex"
TOKEN(EXCEPT)           /* SQL-2003-R */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 160 "sqlparser_hana.lex"
TOKEN(EXCLUDE)          /* SQL-2003-N */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 161 "sqlparser_hana.lex"
TOKEN(EXISTS)           /* SQL-2003-R */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 162 "sqlparser_hana.lex"
TOKEN(FLOAT)            /* SQL-2003-R */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 163 "sqlparser_hana.lex"
TOKEN(FOLLOWING)        /* SQL-2003-N */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 164 "sqlparser_hana.lex"
TOKEN(FOR)              /* SQL-2003-R */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 165 "sqlparser_hana.lex"
TOKEN(FROM)             /* SQL-2003-R */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 166 "sqlparser_hana.lex"
TOKEN(FULL)             /* SQL-2003-R */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 167 "sqlparser_hana.lex"
TOKEN(G)                /* SQL-2003-N */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 168 "sqlparser_hana.lex"
TOKEN(GROUP)            /* SQL-2003-R */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 169 "sqlparser_hana.lex"
TOKEN(GROUPING)         /* SQL-2003-R */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 170 "sqlparser_hana.lex"
TOKEN(HAVING)           /* SQL-2003-R */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 171 "sqlparser_hana.lex"
TOKEN(HOUR)             /* SQL-2003-R */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 172 "sqlparser_hana.lex"
TOKEN(IN)               /* SQL-2003-R */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 173 "sqlparser_hana.lex"
TOKEN(INNER)            /* SQL-2003-R */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 174 "sqlparser_hana.lex"
TOKEN(INSERT)           /* SQL-2003-R */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 175 "sqlparser_hana.lex"
TOKEN(INT)              /* SQL-2003-R */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 176 "sqlparser_hana.lex"
TOKEN(INTEGER)          /* SQL-2003-R */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 177 "sqlparser_hana.lex"
TOKEN(INTERSECT)        /* SQL-2003-R */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 178 "sqlparser_hana.lex"
TOKEN(INTERVAL)         /* SQL-2003-R */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 179 "sqlparser_hana.lex"
TOKEN(INTO)             /* SQL-2003-R */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 180 "sqlparser_hana.lex"
TOKEN(IS)               /* SQL-2003-R */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 181 "sqlparser_hana.lex"
TOKEN(JOIN)             /* SQL-2003-R */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 182 "sqlparser_hana.lex"
TOKEN(K)                /* SQL-2003-N */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 183 "sqlparser_hana.lex"
TOKEN(LARGE)            /* SQL-2003-R */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 184 "sqlparser_hana.lex"
TOKEN(LEFT)             /* SQL-2003-R */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 185 "sqlparser_hana.lex"
TOKEN(LIKE)             /* SQL-2003-R */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 186 "sqlparser_hana.lex"
TOKEN(M)                /* SQL-2003-N */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 187 "sqlparser_hana.lex"
TOKEN(MAX)              /* SQL-2003-N */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 188 "sqlparser_hana.lex"
TOKEN(MIN)              /* SQL-2003-N */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 189 "sqlparser_hana.lex"
TOKEN(MINUTE)           /* SQL-2003-R */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 190 "sqlparser_hana.lex"
TOKEN(MOD)              /* SQL-2003-N, here is reserved as an operator */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 191 "sqlparser_hana.lex"
TOKEN(MONTH)            /* SQL-2003-R */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 192 "sqlparser_hana.lex"
TOKEN(MULTISET)         /* SQL-2003-R */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 193 "sqlparser_hana.lex"
TOKEN(NATIONAL)         /* SQL-2003-R */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 194 "sqlparser_hana.lex"
TOKEN(NATURAL)          /* SQL-2003-R */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 195 "sqlparser_hana.lex"
TOKEN(NCHAR)            /* SQL-2003-R */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 196 "sqlparser_hana.lex"
TOKEN(NCLOB)            /* SQL-2003-R */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 197 "sqlparser_hana.lex"
TOKEN(NO)               /* SQL-2003-R */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 198 "sqlparser_hana.lex"
TOKEN(NOT)              /* SQL-2003-R */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 199 "sqlparser_hana.lex"
TOKEN(NULLIF)           /* SQL-2003-N */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 200 "sqlparser_hana.lex"
TOKEN(NUMERIC)          /* SQL-2003-R */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 201 "sqlparser_hana.lex"
TOKEN(OBJECT)           /* SQL-2003-N */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 202 "sqlparser_hana.lex"
TOKEN(OCTETS)           /* SQL-2003-N */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 203 "sqlparser_hana.lex"
TOKEN(OF)               /* SQL-2003-R */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 204 "sqlparser_hana.lex"
TOKEN(ON)               /* SQL-2003-R */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 205 "sqlparser_hana.lex"
TOKEN(ONLY)             /* SQL-2003-R */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 206 "sqlparser_hana.lex"
TOKEN(OR)               /* SQL-2003-R */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 207 "sqlparser_hana.lex"
TOKEN(ORDER)            /* SQL-2003-R */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 208 "sqlparser_hana.lex"
TOKEN(OTHERS)           /* SQL-2003-N */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 209 "sqlparser_hana.lex"
TOKEN(OUTER)            /* SQL-2003-R */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 210 "sqlparser_hana.lex"
TOKEN(OVER)             /* SQL-2003-R */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 211 "sqlparser_hana.lex"
TOKEN(PARTITION)        /* SQL-2003-R */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 212 "sqlparser_hana.lex"
TOKEN(PERCENT_RANK)     /* SQL-2003-N */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 213 "sqlparser_hana.lex"
TOKEN(PRECEDING)        /* SQL-2003-N */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 214 "sqlparser_hana.lex"
TOKEN(PRECISION)        /* SQL-2003-R */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 215 "sqlparser_hana.lex"
TOKEN(RANGE)            /* SQL-2003-R */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 216 "sqlparser_hana.lex"
TOKEN(RANK)             /* SQL-2003-N */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 217 "sqlparser_hana.lex"
TOKEN(READ)             /* SQL-2003-N */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 218 "sqlparser_hana.lex"
TOKEN(REAL)             /* SQL-2003-R */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 219 "sqlparser_hana.lex"
TOKEN(RECURSIVE)        /* SQL-2003-R */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 220 "sqlparser_hana.lex"
TOKEN(REF)              /* SQL-2003-R */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 221 "sqlparser_hana.lex"
TOKEN(RIGHT)            /* SQL-2003-R */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 222 "sqlparser_hana.lex"
TOKEN(ROW)              /* SQL-2003-R */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 223 "sqlparser_hana.lex"
TOKEN(ROWS)             /* SQL-2003-R */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 224 "sqlparser_hana.lex"
TOKEN(ROW_NUMBER)       /* SQL-2003-N */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 225 "sqlparser_hana.lex"
TOKEN(SCOPE)            /* SQL-2003-? */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 226 "sqlparser_hana.lex"
TOKEN(SECOND)           /* SQL-2003-R */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 227 "sqlparser_hana.lex"
TOKEN(SELECT)           /* SQL-2003-R */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 228 "sqlparser_hana.lex"
TOKEN(SESSION_USER)     /* SQL-2003-R */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 229 "sqlparser_hana.lex"
TOKEN(SET)              /* SQL-2003-R */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 230 "sqlparser_hana.lex"
TOKEN(SETS)             /* SQL-2003-N */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 231 "sqlparser_hana.lex"
TOKEN(SMALLINT)         /* SQL-2003-R */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 232 "sqlparser_hana.lex"
TOKEN(SOME)             /* SQL-2003-R */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 233 "sqlparser_hana.lex"
TOKEN(STDDEV_POP)       /* SQL-2003-N */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 234 "sqlparser_hana.lex"
TOKEN(STDDEV_SAMP)      /* SQL-2003-N */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 235 "sqlparser_hana.lex"
TOKEN(SUM)              /* SQL-2003-N */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 236 "sqlparser_hana.lex"
TOKEN(SYSTEM_USER)      /* SQL-2003-R */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 237 "sqlparser_hana.lex"
TOKEN(THEN)             /* SQL-2003-R */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 238 "sqlparser_hana.lex"
TOKEN(TIES)             /* SQL-2003-N */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 239 "sqlparser_hana.lex"
TOKEN(TIME)             /* SQL-2003-R */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 240 "sqlparser_hana.lex"
TOKEN(TIMESTAMP)        /* SQL-2003-R */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 241 "sqlparser_hana.lex"
TOKEN(TO)               /* SQL-2003-R */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 242 "sqlparser_hana.lex"
TOKEN(UNBOUNDED)        /* SQL-2003-N */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 243 "sqlparser_hana.lex"
TOKEN(UNION)            /* SQL-2003-R */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 244 "sqlparser_hana.lex"
TOKEN(UPDATE)           /* SQL-2003-R */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 245 "sqlparser_hana.lex"
TOKEN(USING)            /* SQL-2003-R */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 246 "sqlparser_hana.lex"
TOKEN(VALUES)           /* SQL-2003-R */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 247 "sqlparser_hana.lex"
TOKEN(VARCHAR)          /* SQL-2003-R */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 248 "sqlparser_hana.lex"
TOKEN(VARYING)          /* SQL-2003-R */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 249 "sqlparser_hana.lex"
TOKEN(VAR_POP)          /* SQL-2003-R */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 250 "sqlparser_hana.lex"
TOKEN(VAR_SAMP)         /* SQL-2003-R */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 251 "sqlparser_hana.lex"
TOKEN(WHEN)             /* SQL-2003-R */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 252 "sqlparser_hana.lex"
TOKEN(WHERE)            /* SQL-2003-R */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 253 "sqlparser_hana.lex"
TOKEN(WITH)             /* SQL-2003-R */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 254 "sqlparser_hana.lex"
TOKEN(WITHOUT)          /* SQL-2003-R */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 255 "sqlparser_hana.lex"
TOKEN(YEAR)             /* SQL-2003-R */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 256 "sqlparser_hana.lex"
TOKEN(ZONE)             /* SQL-2003-N */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 257 "sqlparser_hana.lex"
TOKEN(LIMIT)             /* hana */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 258 "sqlparser_hana.lex"
TOKEN(OFFSET)            /* hana */
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 259 "sqlparser_hana.lex"
TOKEN(TOP)               /* hana */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 260 "sqlparser_hana.lex"
TOKEN(HINT)              /* hana */
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 261 "sqlparser_hana.lex"
TOKEN(RANGE_RESTRICTION) /* hana */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 262 "sqlparser_hana.lex"
TOKEN(MANY)              /* hana --left outer many to one join */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 263 "sqlparser_hana.lex"
TOKEN(ONE)               /* hana */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 264 "sqlparser_hana.lex"
TOKEN(NVARCHAR)          /* hana */
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 265 "sqlparser_hana.lex"
TOKEN(UPSERT)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 266 "sqlparser_hana.lex"
TOKEN(REPLACE)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 267 "sqlparser_hana.lex"
TOKEN(PRIMARY)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 268 "sqlparser_hana.lex"
TOKEN(KEY)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 269 "sqlparser_hana.lex"
TOKEN(PARAMETERS)       /* hana */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 270 "sqlparser_hana.lex"
TOKEN(CONTAINS)         /* hana */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 271 "sqlparser_hana.lex"
TOKEN(SECONDDATE)       /* hana datatype */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 272 "sqlparser_hana.lex"
TOKEN(TINYINT)          /* hana datatype */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 273 "sqlparser_hana.lex"
TOKEN(SMALLDECIMAL)     /* hana datatype */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 274 "sqlparser_hana.lex"
TOKEN(TEXT)             /* hana datatype */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 275 "sqlparser_hana.lex"
TOKEN(BINTEXT)          /* hana datatype */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 276 "sqlparser_hana.lex"
TOKEN(ALPHANUM)         /* hana datatype */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 277 "sqlparser_hana.lex"
TOKEN(VARBINARY)        /* hana datatype */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 278 "sqlparser_hana.lex"
TOKEN(SHORTTEXT)        /* hana datatype */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 279 "sqlparser_hana.lex"
TOKEN(ORDINALITY)       /* hana */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 280 "sqlparser_hana.lex"
TOKEN(UNNEST)           /* hana */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 281 "sqlparser_hana.lex"
TOKEN(HISTORY)          /* hana */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 282 "sqlparser_hana.lex"
TOKEN(OVERRIDING)       /* hana */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 283 "sqlparser_hana.lex"
TOKEN(USER)             /* hana */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 284 "sqlparser_hana.lex"
TOKEN(SYSTEM)           /* hana */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 285 "sqlparser_hana.lex"
TOKEN(VALUE)            /* hana */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 286 "sqlparser_hana.lex"
TOKEN(NULLS)            /* hana */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 287 "sqlparser_hana.lex"
TOKEN(FIRST)            /* hana */
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 288 "sqlparser_hana.lex"
TOKEN(LAST)             /* hana */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 289 "sqlparser_hana.lex"
TOKEN(CORR)             /* hana */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 290 "sqlparser_hana.lex"
TOKEN(CORR_SPEARMAN)    /* hana */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 291 "sqlparser_hana.lex"
TOKEN(MEDIAN)           /* hana */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 292 "sqlparser_hana.lex"
TOKEN(STDDEV)           /* hana */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 293 "sqlparser_hana.lex"
TOKEN(VAR)              /* hana */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 294 "sqlparser_hana.lex"
TOKEN(STRING_AGG)       /* hana */
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 295 "sqlparser_hana.lex"
TOKEN(MEMBER)           /* hana */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 296 "sqlparser_hana.lex"
TOKEN(SYSTEM_TIME)      /* hana */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 297 "sqlparser_hana.lex"
TOKEN(APPLICATION_TIME) /* hana */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 298 "sqlparser_hana.lex"
TOKEN(TABLESAMPLE)      /* hana */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 299 "sqlparser_hana.lex"
TOKEN(BERNOULLI)        /* hana */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 300 "sqlparser_hana.lex"
TOKEN(EXACT)            /* hana */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 301 "sqlparser_hana.lex"
TOKEN(RETURN)           /* hana */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 302 "sqlparser_hana.lex"
TOKEN(LATERAL)          /* hana */
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 303 "sqlparser_hana.lex"
TOKEN(BINNING)          /* hana */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 304 "sqlparser_hana.lex"
TOKEN(LAG)              /* hana */
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 305 "sqlparser_hana.lex"
TOKEN(LEAD)             /* hana */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 306 "sqlparser_hana.lex"
TOKEN(RANDOM_PARTITION) /* hana */
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 307 "sqlparser_hana.lex"
TOKEN(WEIGHTED_AVG)     /* hana */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 308 "sqlparser_hana.lex"
TOKEN(EXTRACT)          /* hana */
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 309 "sqlparser_hana.lex"
TOKEN(FIRST_VALUE)      /* hana */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 310 "sqlparser_hana.lex"
TOKEN(LAST_VALUE)       /* hana */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 311 "sqlparser_hana.lex"
TOKEN(NTH_VALUE)        /* hana */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 312 "sqlparser_hana.lex"
TOKEN(NTILE)            /* hana */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 313 "sqlparser_hana.lex"
TOKEN(LOCATE_REGEXPR)   /* hana */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 314 "sqlparser_hana.lex"
TOKEN(OCCURRENCES_REGEXPR)          /* hana */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 315 "sqlparser_hana.lex"
TOKEN(REPLACE_REGEXPR)  /* hana */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 316 "sqlparser_hana.lex"
TOKEN(SUBSTR_REGEXPR)   /* hana */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 317 "sqlparser_hana.lex"
TOKEN(PERCENTILE_CONT)  /* hana */
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 318 "sqlparser_hana.lex"
TOKEN(PERCENTILE_DISC)  /* hana */
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 319 "sqlparser_hana.lex"
TOKEN(TRIM)             /* hana */
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 320 "sqlparser_hana.lex"
TOKEN(WITHIN)           /* hana */
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 321 "sqlparser_hana.lex"
TOKEN(SERIES_FILTER)     /* hana *//* grouping sets option */
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 322 "sqlparser_hana.lex"
TOKEN(ROLLUP)            /* hana *//* grouping sets option */
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 323 "sqlparser_hana.lex"
TOKEN(CUBE)              /* hana *//* grouping sets option */
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 324 "sqlparser_hana.lex"
TOKEN(BEST)              /* hana *//* grouping sets option */
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 325 "sqlparser_hana.lex"
TOKEN(SUBTOTAL)          /* hana *//* grouping sets option */
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 326 "sqlparser_hana.lex"
TOKEN(BALANCE)           /* hana *//* grouping sets option */
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 327 "sqlparser_hana.lex"
TOKEN(TOTAL)             /* hana *//* grouping sets option */
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 328 "sqlparser_hana.lex"
TOKEN(MULTIPLE)          /* hana *//* grouping sets option */
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 329 "sqlparser_hana.lex"
TOKEN(RESULTSETS)        /* hana *//* grouping sets option */
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 330 "sqlparser_hana.lex"
TOKEN(PREFIX)            /* hana *//* grouping sets option */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 331 "sqlparser_hana.lex"
TOKEN(STRUCTURED)        /* hana *//* grouping sets option */
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 332 "sqlparser_hana.lex"
TOKEN(RESULT)            /* hana *//* grouping sets option */
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 333 "sqlparser_hana.lex"
TOKEN(OVERVIEW)          /* hana *//* grouping sets option */
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 334 "sqlparser_hana.lex"
TOKEN(TEXT_FILTER)       /* hana *//* grouping sets option */
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 335 "sqlparser_hana.lex"
TOKEN(FILL)              /* hana *//* grouping sets option */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 336 "sqlparser_hana.lex"
TOKEN(UP)                /* hana *//* grouping sets option */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 337 "sqlparser_hana.lex"
TOKEN(MATCHES)           /* hana *//* grouping sets option */
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 338 "sqlparser_hana.lex"
TOKEN(SORT)              /* hana *//* grouping sets option */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 339 "sqlparser_hana.lex"
TOKEN(MINUS)             /* hana */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 340 "sqlparser_hana.lex"
TOKEN(ROWCOUNT)          /* hana */
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 341 "sqlparser_hana.lex"
TOKEN(LOCKED)            /* hana */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 342 "sqlparser_hana.lex"
TOKEN(IGNORE)
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 343 "sqlparser_hana.lex"
TOKEN(SHARE)
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 344 "sqlparser_hana.lex"
TOKEN(LOCK)
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 345 "sqlparser_hana.lex"
TOKEN(UTCTIMESTAMP)
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 346 "sqlparser_hana.lex"
TOKEN(COMMIT)
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 347 "sqlparser_hana.lex"
TOKEN(ID)
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 348 "sqlparser_hana.lex"
TOKEN(WAIT)
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 349 "sqlparser_hana.lex"
TOKEN(NOWAIT)
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 350 "sqlparser_hana.lex"
TOKEN(JSON)
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 351 "sqlparser_hana.lex"
TOKEN(XML)
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 352 "sqlparser_hana.lex"
TOKEN(RETURNS)
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 354 "sqlparser_hana.lex"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return HANA_NULLX;
}
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 359 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    return HANA_INTNUM;
}
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 365 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_INT, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = atoi(yytext);
    return HANA_INTNUM;
}
	YY_BREAK
case 243:
#line 374 "sqlparser_hana.lex"
case 244:
#line 375 "sqlparser_hana.lex"
case 245:
YY_RULE_SETUP
#line 375 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return HANA_APPROXNUM;
}
	YY_BREAK
case 246:
#line 383 "sqlparser_hana.lex"
case 247:
YY_RULE_SETUP
#line 383 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_DOUBLE, yytext);
    yylval->node = nd;
    nd->terminalToken_.d = atof(yytext);
    return HANA_APPROXNUM;
}
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 390 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 1;
    return HANA_BOOL;
}
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 397 "sqlparser_hana.lex"
{
    yylval->node = Node::makeTerminalNode(E_NULL, yytext);
    return HANA_UNKNOWN;
}
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 402 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_BOOL, yytext);
    yylval->node = nd;
    nd->terminalToken_.i = 0;
    return HANA_BOOL;
}
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 409 "sqlparser_hana.lex"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << '\'';
}
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 415 "sqlparser_hana.lex"
{
    BEGIN(sq);
    ((ParseResult*)yyextra)->buf_ = std::stringstream{};
    ((ParseResult*)yyextra)->buf_ << "N'";
}
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 421 "sqlparser_hana.lex"
{
    ((ParseResult*)yyextra)->buf_ << "''";
}
	YY_BREAK
case 254:
/* rule 254 can match eol */
YY_RULE_SETUP
#line 425 "sqlparser_hana.lex"
{
    ((ParseResult*)yyextra)->buf_ << yytext;
}
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 429 "sqlparser_hana.lex"
{
    BEGIN(INITIAL);
    ((ParseResult*)yyextra)->buf_ << '\'';
    Node* nd = Node::makeTerminalNode(E_STRING, ((ParseResult*)yyextra)->buf_.str().c_str());
    nd->terminalToken_.str = ((ParseResult*)yyextra)->buf_.str();
    yylval->node = nd;
    return HANA_STRING;
}
	YY_BREAK
case YY_STATE_EOF(sq):
#line 438 "sqlparser_hana.lex"
{
  fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n");
  return HANA_ERROR;
}
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 444 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
    yylval->node = nd;
    nd->terminalToken_.str = escape_double_quotation(std::string(yytext+1, yytext + strlen(yytext) - 1), '"');
    nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
    return HANA_NAME;
}
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 454 "sqlparser_hana.lex"
{
	Node* nd = Node::makeTerminalNode(E_IDENTIFIER, yytext);
	yylval->node = nd;
	nd->terminalToken_.str = yytext;
	nd->terminalToken_.line = yylloc->first_line;
    nd->terminalToken_.column = yylloc->first_column;
	return HANA_NAME;
}
	YY_BREAK
case 258:
/* rule 258 can match eol */
YY_RULE_SETUP
#line 464 "sqlparser_hana.lex"
{ /* ignore */ }
	YY_BREAK
case 259:
/* rule 259 can match eol */
YY_RULE_SETUP
#line 465 "sqlparser_hana.lex"
{ /* ignore */ }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 467 "sqlparser_hana.lex"
{ return yytext[0];}
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 470 "sqlparser_hana.lex"
{ return HANA_CNNOP; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 471 "sqlparser_hana.lex"
{ return HANA_COMP_EQ; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 472 "sqlparser_hana.lex"
{ return HANA_COMP_GE; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 473 "sqlparser_hana.lex"
{ return HANA_COMP_GT; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 474 "sqlparser_hana.lex"
{ return HANA_COMP_LE; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 475 "sqlparser_hana.lex"
{ return HANA_COMP_LT; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 476 "sqlparser_hana.lex"
{ return HANA_COMP_NE; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 477 "sqlparser_hana.lex"
{ return HANA_COMP_NE; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 478 "sqlparser_hana.lex"
{ return HANA_P_POINT; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 480 "sqlparser_hana.lex"

	YY_BREAK
case 271:
YY_RULE_SETUP
#line 482 "sqlparser_hana.lex"
{
    Node* nd = Node::makeTerminalNode(E_QUESTIONMARK, yytext);
    g_QuestMarkId++;
    nd->questmarkid_ = g_QuestMarkId;
    yylval->node = nd;
    return HANA_QUESTIONMARK;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(hint):
case YY_STATE_EOF(sb):
#line 491 "sqlparser_hana.lex"
{ return HANA_END_P; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 493 "sqlparser_hana.lex"
{
    fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]);
    return HANA_ERROR;   /* todo ignore or return ERROR */
}
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 497 "sqlparser_hana.lex"
ECHO;
	YY_BREAK
#line 3386 "sqlparser_hana_flex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1097 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1097 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1096);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 497 "sqlparser_hana.lex"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return HANA_ERROR;
}

