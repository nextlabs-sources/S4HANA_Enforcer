#ifndef MY_DISP_WORK_TYPE_H
#define MY_DISP_WORK_TYPE_H

typedef  unsigned int  SAP_UINT;
typedef  unsigned char SAP_RAW;
typedef  int           SAP_INT;
typedef  unsigned char SAP_BOOL;
typedef  int           SAPRETURN;
typedef  char16_t      SAP_UC;

typedef struct  
{
	int _logonHdl;
	unsigned short _logonId;
	unsigned char  _sessionHdl;
}DP_SESSION_INFO;

typedef struct{
    SAP_BOOL valid;
    SAP_UINT respId;
}DP_RESPONSE_INFO;


enum DP_SERVER_ADDRESS_TYPE{DP_SERVER_ADDRESS_INVALID,
              				DP_SERVER_ADDRESS_LOCAL_SERVER, 
			  				DP_SERVER_ADDRESS_BY_NAME, 
							DP_SERVER_ADDRESS_BY_TYPE, 
							DP_SERVER_ADDRESS_MSG_SERVER};

struct DP_SERVER_ADDRESS_BY_TYPE_INFO {
    SAP_INT type;
};

typedef struct{
    char16_t name[40];
}DP_SERVER_ADDRESS_BY_NAME_INFO;

typedef union {
    DP_SERVER_ADDRESS_BY_TYPE_INFO serverTypeInfo;
    DP_SERVER_ADDRESS_BY_NAME_INFO serverNameInfo;
}DP_SERVER_ADDRESS_INFO;

 typedef enum  {DP_AGENT_INVALID,
 				DP_AGENT_DISPATCHER, 
				DP_AGENT_GATEWAY, 
				DP_AGENT_ICMAN, 
				DP_AGENT_TERMINAL, 
				DP_AGENT_MESSAGE_SERVER, 
				DP_AGENT_WORKER, 
				DP_AGENT_EXT_EVENT, 
				DP_AGENT_STARTSRV,
                 DP_AGENT_DP_MONITOR, DP_AGENT_IC_MONITOR, DP_AGENT_NUMBER
	}DP_AGENT_TYPE;

typedef enum {DP_WORKER_INVALID = -1, 
			  DP_WORKER_NOWP, 
			  DP_WORKER_DIAWP,
			  DP_WORKER_VBWP, 
			  DP_WORKER_ENQWP_DONT_USE, 
			  DP_WORKER_BTCWP, 
			  DP_WORKER_SPOWP, 
			  DP_WORKER_VB2WP, 
			  DP_WORKER_NUM_OF_TYPES
		}DP_WORKER_TYPE ;

typedef struct {
    DP_WORKER_TYPE workerType;
    SAP_INT workerNumber;
    SAP_BOOL specificWorkerByNumber;
}DP_WORKER_INFO;


typedef union {
    DP_WORKER_INFO workerInfo;
}DP_AGENT_INFO;



typedef struct{
    DP_SERVER_ADDRESS_TYPE addressType;
    DP_SERVER_ADDRESS_INFO addressInfo;
    DP_AGENT_TYPE agentType;
    DP_AGENT_INFO agentInfo;
    DP_SESSION_INFO sessionInfo;
    DP_RESPONSE_INFO responseInfo;
}DP_SERVER_ADDRESS;

enum REQ_HANDLER_ID {REQ_HANDLER_UNDEF, REQ_HANDLER_ANY, REQ_HANDLER_GUI, REQ_HANDLER_GUI_RESP, REQ_HANDLER_RFC, REQ_HANDLER_RFC_RESP, REQ_HANDLER_PLUGIN, REQ_HANDLER_PLUGIN_RESP,
    REQ_HANDLER_UPDATE, REQ_HANDLER_UPDATE_RESP, REQ_HANDLER_UPDATE2, REQ_HANDLER_UPDATE2_RESP, REQ_HANDLER_UPDATE_ADMIN, REQ_HANDLER_UPDATE_ADMIN_RESP, REQ_HANDLER_WAIT, REQ_HANDLER_WAIT_RESP,
    REQ_HANDLER_HANDSHAKE, REQ_HANDLER_HANDSHAKE_RESP, REQ_HANDLER_SPOOL, REQ_HANDLER_SPOOL_RESP, REQ_HANDLER_SPOOL_ALARM, REQ_HANDLER_SPOOL_ALARM_RESP, REQ_HANDLER_BUFREF, REQ_HANDLER_BUFREF_RESP,
    REQ_HANDLER_DDLOG, REQ_HANDLER_DDLOG_RESP, REQ_HANDLER_AUTOABAP, REQ_HANDLER_AUTOABAP_RESP, REQ_HANDLER_AUTOTH, REQ_HANDLER_AUTOTH_RESP, REQ_HANDLER_AUTOCCMS, REQ_HANDLER_AUTOCCMS_RESP,
    REQ_HANDLER_DELAY, REQ_HANDLER_DELAY_RESP, REQ_HANDLER_PFADM, REQ_HANDLER_NOSERV = 36, REQ_HANDLER_NOSERV_RESP, REQ_HANDLER_RPC, REQ_HANDLER_RPC_RESP, REQ_HANDLER_ADM, REQ_HANDLER_ADM_RESP,
    REQ_HANDLER_MSG_SERVER, REQ_HANDLER_MSG_SERVER_RESP, REQ_HANDLER_BTC, REQ_HANDLER_BTCSCHED = 46, REQ_HANDLER_BTCSCHED_RESP, REQ_HANDLER_CONTROL, REQ_HANDLER_EXPRMAIL = 50, REQ_HANDLER_EXPRMSG = 52,
    REQ_HANDLER_FREE_1 = 54, REQ_HANDLER_FREE_1_RESP, REQ_HANDLER_EXEC_PROG, REQ_HANDLER_CTRLMODE = 58, REQ_HANDLER_WAKEUP_MODE = 60, REQ_HANDLER_INSPECT_MODE = 62, REQ_HANDLER_MODE_MSG = 64,
    REQ_HANDLER_MODE_MSG_RESP, REQ_HANDLER_DBG_AMSG, REQ_HANDLER_MSG_TEST = 68, REQ_HANDLER_MSG_TEST_RESP, REQ_HANDLER_PECC, REQ_HANDLER_RESUME_ABAP_VM = 72, REQ_HANDLER_SESSION = 74,
    REQ_HANDLER_SESSION_RESP, REQ_HANDLER_DELETE_SCHEDULES = 78, REQ_HANDLER_SHUTDOWN = 80, REQ_HANDLER_ATTACH_SHM = 82, REQ_HANDLER_PROCESS = 84, REQ_HANDLER_REGISTER_PROCESS = 86,
    REQ_HANDLER_ICMAN_OPCODE = 88, REQ_HANDLER_ICMAN_OPCODE_RESP, REQ_HANDLER_MSADM, REQ_HANDLER_MSADM_RESP, REQ_HANDLER_GUI_ASYNC, REQ_HANDLER_UPDATE_SESSION_INFORMATION = 94,
    REQ_HANDLER_CHECK_HANDSHAKE = 96, REQ_HANDLER_HANDLE_ACL_FILE = 98, REQ_HANDLER_HANDLE_ACL_FILE_RESP, REQ_HANDLER_CHECK_WP_CONF, REQ_HANDLER_RESET_STATISTIC = 104, REQ_HANDLER_ASSERTION_TICKET = 114,
    REQ_HANDLER_ASSERTION_TICKET_RESP, REQ_HANDLER_AMC_MESSAGE, REQ_HANDLER_AMC_MESSAGE_RESP, REQ_HANDLER_BGRFC_WATCHDOG, REQ_HANDLER_BGRFC_WATCHDOG_RESP, REQ_HANDLER_WEB_SOCKET_SEND,
    REQ_HANDLER_CREATE_SNAPSHOT = 122, REQ_HANDLER_SERVER_STARTUP = 124, REQ_HANDLER_SERVER_STARTUP_RESP, REQ_HANDLER_APC, REQ_HANDLER_APC_CONTROL = 128, REQ_HANDLER_SUSPEND_SERVER = 130,
    REQ_HANDLER_RESUME_SERVER = 132, REQ_HANDLER_SUSPEND_SYSTEM = 134, REQ_HANDLER_RESUME_SYSTEM = 136, REQ_HANDLER_SYSTEM_SUSPENDED = 138, REQ_HANDLER_SYSTEM_SUSPENDED_RESP, REQ_HANDLER_GW_MON,
    REQ_HANDLER_GW_MON_RESP, REQ_HANDLER_AMC_MESSAGE_FOR_UI, REQ_HANDLER_AMC_ADMIN = 144, REQ_HANDLER_AMC_ADMIN_RESP, REQ_HANDLER_WP_INIT_DONE, REQ_HANDLER_AUTOSECURITY = 148,
    REQ_HANDLER_AUTOSECURITY_RESP, REQ_HANDLER_CHECK_RECONNECT, REQ_HANDLER_JOB_REPO_ACTIVATE = 152, REQ_HANDLER_JOB_REPO_ACTIVATE_RESP, REQ_HANDLER_WEB_SOCKET_SW_CMD, REQ_HANDLER_WEB_SOCKET_SW_CMD_RESP,
    REQ_HANDLER_TRIGGER_AUTOABAP, REQ_HANDLER_HTTP_RESP_SEND = 158, REQ_HANDLER_AB_SHO_CONTRUCTOR = 160, REQ_HANDLER_START_ETD_SEND_PROXY = 162, REQ_HANDLER_DAEMON_CONTROL = 164,
    REQ_HANDLER_VANISHED_SERVER = 166, REQ_HANDLER_TRACE = 168, REQ_HANDLER_ABAP_TIMER = 170, REQ_HANDLER_ABAP_TIMER_RESP, REQ_HANDLER_ABAP_USER_EVENT, REQ_HANDLER_ABAP_USER_EVENT_RESP,
    REQ_HANDLER_UPDATE_WATCHDOG, REQ_HANDLER_LAST};


typedef struct {
    SAP_UINT rq_id;
    SAP_RAW version;
    SAP_RAW reqprio;
    SAP_UINT userTraceLevel;
    SAP_UINT len;
    DP_SERVER_ADDRESS sender;
    DP_SERVER_ADDRESS receiver; 
    REQ_HANDLER_ID reqHandlerId;
    SAP_INT compositeMessageId;
    SAP_INT compositeMessageCounter;
    size_t compositeMessageTotalLength;
    SAP_BOOL endOfCompositeMessage;
    SAP_BOOL compositeMessageDataInGlobalBuffer;
	/*
    REQ_REQ_RC reqRc;
    SAP_BOOL still_valid;
    SAP_BOOL sendHandShake;
    DP_TIME reqCreationTime;
    CA_BLK_HDL ca_blk;
    union {
        unsigned char shortData[128];
        SAP_MAX_ALIGN_T align;
    };
    SAP_UINT shortDataLen;
    SAP_INT protocol;
    MpiHandle mpi_read_hdl;
    MpiHandle mpi_write_hdl;
    SAP_INT icm_opcode;
    SAP_SHORT dtrace_creator_id;
    unsigned char dtrace_root_id[16];
    unsigned char dtrace_conn_id[16];
    SAP_UINT dtrace_seq_nr;*/
}REQUEST_BUF;

typedef union{
    unsigned char addr[16];
    unsigned short addr16[8];
    unsigned int addr32[4];
    unsigned long addr64[2];
}NI_NODEADDR;

enum RQ_Q_PRIO {RQ_Q_PRIO_HIGH, RQ_Q_PRIO_NORMAL, RQ_Q_PRIO_LOW, RQ_Q_PRIO_NR_OF_PRIOS, RQ_Q_PRIO_INVALID};
enum DP_LOGON_TYPE {DP_LOGON_TYPE_UNDEF, DP_LOGON_GUI, DP_LOGON_RFC, DP_LOGON_PLUGIN, DP_LOGON_INTERNAL, DP_LOGON_APC, DP_LOGON_NR_OF_TYPES};

typedef struct{
    char16_t client[3];
    char16_t user[12];

    char16_t terminal[20];

    char16_t tcod[20];
    #ifdef _AIX
    char16_t programInfo[24];
    #else
    char16_t programInfo[40];
    #endif
    
    time_t diatime;
    SAP_INT numberOfSessions;
    SAP_INT logonId;
    SAP_INT lastActiveSession;
    SAP_INT lastActiveWorker;
    SAP_INT logonType;
    RQ_Q_PRIO prio;
}DP_LOGON_INFO;

typedef struct{
    std::string _client;
    std::string _user;
    std::string _ip;
	std::string _tcode;
}DAE_LOGON_INFO;

struct SAP_SYMBOL{
    std::string _strFunName;
    std::string _symbolName;
    #ifdef _WIN32
        unsigned long long _addr;
    #else
        unsigned long _addr;
    #endif 
};

typedef void(*ThWpSetCurrentSessionFun)(DP_SESSION_INFO info);
typedef void(*ThBnameSetFun)(int, char16_t const*);
typedef void(*ThRqSetCurrentRequestFun)(REQUEST_BUF* requestBuf); //didn't call this function
typedef SAPRETURN(*ThRqCheckQueuesFun)(int,REQUEST_BUF**);
typedef NI_NODEADDR*(*DpSesGetLogonNetworkAddressFun)(int logon);
typedef char16_t*(*DpSesGetUserNameFun)(int logon);
typedef SAPRETURN(*DpSesGetLogonInfoFun)(int logon, DP_LOGON_INFO* logonInfo);
typedef SAPRETURN(*NiAddrToStrFun)(NI_NODEADDR const* pNodeAddr, SAP_UC* pNodeAddrStr, SAP_UINT bufferLen, SAP_BOOL useIPV4Format);


#endif 